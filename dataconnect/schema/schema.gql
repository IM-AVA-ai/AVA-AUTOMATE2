# # Example schema for simple movie review app

# # User table is keyed by Firebase Auth UID.
type User @table {
  # `@default(expr: "auth.uid")` sets it to Firebase Auth UID during insert and upsert.
  id: String! @default(expr: "auth.uid")
  username: String! @col(dataType: "varchar(50)")
  email: String! @col(dataType: "varchar(255)")
  createdAt: Date! @default(expr: "request.time")
  # The `user: User!` field in the Review table generates the following one-to-many query field.
  #  reviews_on_user: [Review!]!
  # The `Review` join table the following many-to-many query field.
 campaigns: [Campaign!]! @hasMany(foreignKey: "createdBy")
  #  movies_via_Review: [Movie!]!
}

# Define an Enum for notification statuses
enum NotificationStatus {
 NEW
 DELIVERED
 DISMISSED
}

# Enum for lead statuses.
enum LeadStatus {
  NO_REPLY
  REJECTED
  CONVERTED
}

# Define an Enum for message senders
enum MessageSender {
  LEAD
  ASSISTANT
}

# Define an Enum for message directions
enum MessageDirection {
  INBOUND
  OUTBOUND
}

# Campaign table to store SMS campaign details.
type Campaign @table {
  # Automatically generated unique ID for the campaign.
  id: String! @default(expr: "uuidV4()")
  name: String! @col(dataType: "varchar(255)")
  description: String @col(dataType: "text")
  status: String! @col(dataType: "varchar(50)")
  createdBy: String! # Link to the User who created the campaign.
  createdAt: Date! @default(expr: "request.time")
  sentAt: Date
  completedAt: Date
  totalLeads: Int
  sentCount: Int
  respondedCount: Int
  aiAgentId: String! # Link to the AI agent used for this campaign.
  aiAgent: AIAgent! @oneToOne(foreignKey: "aiAgentId")
 leads: [Lead!]! @hasMany(foreignKey: "recentCampaignId")
}

# AI Agent table to store definitions of AI assistants.
type AIAgent @table {
  # Automatically generated unique ID for the AI agent.
  id: String! @default(expr: "uuidV4()")
  name: String! @col(dataType: "varchar(255)")
  description: String @col(dataType: "text")
  systemPrompt: String! @col(dataType: "text")
  initialMessage: String! @col(dataType: "text")
}

# Response Rule table to store rules associated with AI agents.
type ResponseRule @table {
  id: String! @default(expr: "uuidV4()") # Automatically generated unique ID for the response rule.
  aiAgentId: String! # Link to the AI agent this rule belongs to.
  condition: String! @col(dataType: "text") # The condition for the rule (e.g., "sentiment is negative").
  action: String! @col(dataType: "text") # The action to take if the condition is met (e.g., "tag lead as rejected").
}

# Lead table to store lead information.
type Lead @table {
  # Automatically generated unique ID for the lead.
  id: String! @default(expr: "uuidV4()")
  first_name: String! @col(dataType: "varchar(255)")
  last_name: String! @col(dataType: "varchar(255)")
  phone: String! @col(dataType: "varchar(20)") # Store phone number including country code.
  email: String @col(dataType: "varchar(255)")
  address: String @col(dataType: "text")
  recentCampaignId: String # Link to the recent Campaign.
  lastContacted: Date
  status: LeadStatus! # Use the LeadStatus Enum.

  # Relationship to Conversations associated with this lead
  conversations: [Conversation!]! @hasMany(foreignKey: "leadId")
}

# Message table to store individual messages within conversations.
type Message @table {
  # Automatically generated unique ID for the message.
  id: String! @default(expr: "uuidV4()")
  conversationId: String! # Link to the Conversation the message belongs to.
  sender: MessageSender! # 'LEAD' or 'ASSISTANT'
  text: String! @col(dataType: "text")
  timestamp: Date! @default(expr: "request.time")
  direction: MessageDirection! # 'INBOUND' or 'OUTBOUND'
  status: String! @col(dataType: "varchar(50)")

  # Relationship to the Conversation this message belongs to
  conversation: Conversation! @oneToOne(foreignKey: "conversationId")
}

# Notification table to store user notifications.
type Notification @table {
  id: String! @default(expr: "uuidV4()") # Automatically generated unique ID for the notification.
  userId: String! # Link to the User who receives the notification.
  type: String! @col(dataType: "varchar(100)") # Type of notification (e.g., 'NewLeadReply').
  message: String! @col(dataType: "text") # The notification message content.
  createdAt: Date! @default(expr: "request.time") # Timestamp when the notification was created.
  readAt: Date # Timestamp when the notification was read (optional).
  relatedEntityId: String # Optional link to a related entity (e.g., Campaign, Lead, Message ID).
  status: NotificationStatus! # Use the NotificationStatus Enum.
}

# Conversation table to represent conversation threads.
type Conversation @table {
 # Automatically generated unique ID for the conversation.
  id: String! @default(expr: "uuidV4()")
  leadId: String! # Link to the Lead involved in the conversation.
  clientId: String! # Link to the User (client) associated with this conversation.
  aiAgentId: String! # Link to the AI agent involved in the conversation.
  createdAt: Date! @default(expr: "request.time")
  lastUpdatedAt: Date! @default(expr: "request.time") # Automatically update on changes

  # Relationship to the Lead involved in the conversation
  lead: Lead! @oneToOne(foreignKey: "leadId")

  # Relationship to the Client (User) associated with this conversation
  client: User! @oneToOne(foreignKey: "clientId")

  # Relationship to the AI agent involved in the conversation
  aiAgent: AIAgent! @oneToOne(foreignKey: "aiAgentId")

  # Relationship to the Messages within this conversation
  messages: [Message!]! @hasMany(foreignKey: "conversationId")
}

type Query {
  # Query to find leads by phone number or email
  leadsByContact(phone: String, email: String): [Lead!]!
    @firestore(
      collection: "leads"
      query: "{ phone: "$phone", email: "$email" }"
      operation: READ
    )
    # Query to find conversations by lead ID
  conversationsByLead(leadId: String!): [Conversation!]!
    @firestore(
      collection: "conversations"
      query: "{ leadId: "$leadId" }"
      operation: READ
    )
}

type Mutation {
  insertLead(
    id: String
    first_name: String!
    last_name: String!
    phone: String!
    email: String
    address: String
    recentCampaignId: String
    lastContacted: Date
    status: LeadStatus!
  ): Lead @insert(table: "Lead")

  insertNotification(
    id: String
    userId: String!
    type: String!
    message: String!
    createdAt: Date
    message: String!
  ): Notification @insert(table: "Notification")
    insertConversation(
    id: String
    leadId: String!
    clientId: String!
    aiAgentId: String!
    createdAt: Date
    lastUpdatedAt: Date
  ): Conversation @insert(table: "Conversation")
    insertMessage(
    conversationId: String!
    sender: MessageSender!
    text: String!
    timestamp: Date! @default(expr: "request.time")
    direction: MessageDirection!
    status: String!
  ): Message @insert(table: "Message")
}
