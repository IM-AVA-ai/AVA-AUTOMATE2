"use client";

import React from "react";
import {Card, CardBody, Select, SelectItem, Textarea, Button, Chip, Tabs, Tab, Avatar, Tooltip, ScrollShadow, Input} from "@heroui/react";
import {Icon} from "@iconify/react";
import {cn} from "@heroui/react";

const aiModels = [
  {
    label: "GPT-4 Turbo",
    value: "gpt4-turbo",
    description: "Most capable model, best for complex tasks",
    icon: "lucide:sparkles"
  },
  {
    label: "GPT-3.5",
    value: "gpt35",
    description: "Fast and efficient for most tasks",
    icon: "lucide:zap"
  },
  {
    label: "Claude 2",
    value: "claude2",
    description: "Specialized in analysis and reasoning",
    icon: "lucide:brain"
  }
];

const presetAssistants = [
  {
    label: "Code Expert",
    systemMessage: "You are an expert programmer focused on writing clean, efficient code.",
    icon: "lucide:code"
  },
  {
    label: "Writing Assistant",
    systemMessage: "You are a skilled writer helping with content creation and editing.",
    icon: "lucide:pen-tool"
  },
  {
    label: "Data Analyst",
    systemMessage: "You are a data analyst expert in interpreting and explaining complex data.",
    icon: "lucide:bar-chart"
  }
];

interface Message {
  id: number;
  role: "user" | "assistant" | "system";
  content: string;
}

export default function AIPlayground() {
  const [selectedModel, setSelectedModel] = React.useState("gpt4-turbo");
  const [systemMessage, setSystemMessage] = React.useState("");
  const [userPrompt, setUserPrompt] = React.useState("");
  const [temperature, setTemperature] = React.useState(0.7);
  const [maxLength, setMaxLength] = React.useState(1024);
  const [topP, setTopP] = React.useState(0.5);
  const [frequencyPenalty, setFrequencyPenalty] = React.useState(0);
  const [presencePenalty, setPresencePenalty] = React.useState(0);
  const [prompt, setPrompt] = React.useState<string>("");
  const [messages, setMessages] = React.useState<Message[]>([
    { id: 1, role: "system", content: "You are a helpful Acme AI code assistant" },
  ]);
  const [selectedPreset, setSelectedPreset] = React.useState("Creative");

  const handleSendPrompt = () => {
    if (!prompt.trim()) return;

    // Add user message
    const newUserMessage = {
      id: messages.length + 1,
      role: "user" as const,
      content: prompt
    };

    setMessages([...messages, newUserMessage]);
    setPrompt("");

    // Simulate AI response (in a real app, this would be an API call)
    setTimeout(() => {
      const aiResponse = {
        id: messages.length + 2,
        role: "assistant" as const,
        content: "This is a simulated AI response based on your prompt: \"" + prompt + "\". In a real implementation, this would be generated by the selected AI model with the specified parameters."
      };
      setMessages(prev => [...prev, aiResponse]);
    }, 1000);
  };

  const handleFeedback = (messageId: number, type: 'like' | 'dislike') => {
    console.log(`Feedback for message ${messageId}: ${type}`);
    // In a real app, this would send feedback to the server
  };

  const handlePresetChange = (preset: string) => {
    setSelectedPreset(preset);

    // Adjust parameters based on preset
    switch(preset) {
      case "Creative":
        setTemperature(0.8);
        // Assuming topP, frequencyPenalty, presencePenalty are also state variables in AIPlayground
        // setTopP(0.9);
        // setFrequencyPenalty(0.2);
        // setPresencePenalty(0.2);
        break;
      case "Technical":
        setTemperature(0.3);
        // setTopP(0.6);
        // setFrequencyPenalty(0.1);
        // setPresencePenalty(0.1);
        break;
      case "Precise":
        setTemperature(0.1);
        // setTopP(0.3);
        // setFrequencyPenalty(0);
        // setPresencePenalty(0);
        break;
    }
  };

  const ideas = [
    {
      title: "Create a blog post about HeroUI",
      description: "explain it in simple terms",
    },
    {
      title: "Give me 10 ideas for my next blog post",
      description: "include only the best ideas",
    },
    {
      title: "Compare HeroUI with other UI libraries",
      description: "be as objective as possible",
    },
    {
      title: "Write a text message to my friend",
      description: "be polite and friendly",
    },
  ];
  
  return (
    <div className="flex flex-col w-full h-screen bg-[#0D0B1F] text-white p-4">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-xl">Playground</h1>
        <div className="flex gap-2">
          <Select 
            label="Select a preset"
            className="w-48"
            variant="bordered"
          >
            <SelectItem key="preset1">Preset 1</SelectItem>
            <SelectItem key="preset2">Preset 2</SelectItem>
          </Select>
          <Button variant="flat">Save</Button>
          <Button variant="flat">Update</Button>
          <Button color="danger" variant="flat">Delete</Button>
        </div>
      </div>

      <div className="grid grid-cols-[300px,1fr] gap-4">
        {/* Left Sidebar */}
        <div className="flex flex-col gap-4">
          <Card className="bg-[#1A1A1A]/50 border border-white/10">
            <CardBody>
              <h3 className="text-sm font-medium mb-2">System</h3>
              <Textarea 
                placeholder="You are a helpful AI assistant..."
                value={systemMessage}
                onValueChange={setSystemMessage}
                variant="bordered"
                className="bg-transparent"
                minRows={3}
              />
            </CardBody>
          </Card>

          <Card className="bg-[#1A1A1A]/50 border border-white/10">
            <CardBody className="flex flex-col gap-4">
              <div>
                <h3 className="text-sm font-medium mb-2">Model</h3>
                <Select 
                  selectedKeys={[selectedModel]}
                  onChange={(e) => setSelectedModel(e.target.value)}
                  variant="bordered"
                >
                  {aiModels.map((model) => (
                    <SelectItem key={model.value}>{model.label}</SelectItem>
                  ))}
                </Select>
              </div>

              <div>
                <h3 className="text-sm font-medium mb-2">Temperature</h3>
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.1"
                  value={temperature}
                  onChange={(e) => setTemperature(parseFloat(e.target.value))}
                  className="w-full"
                />
                <div className="text-xs text-gray-400 mt-1">{temperature}</div>
              </div>

              <div>
                <h3 className="text-sm font-medium mb-2">Max Length</h3>
                <input
                  type="range"
                  min="0"
                  max="2048"
                  value={maxLength}
                  onChange={(e) => setMaxLength(parseInt(e.target.value))}
                  className="w-full"
                />
                <div className="text-xs text-gray-400 mt-1">{maxLength}</div>
              </div>

              <div>
                <h3 className="text-sm font-medium mb-2">Top P</h3>
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.1"
                  value={topP}
                  onChange={(e) => setTopP(parseFloat(e.target.value))}
                  className="w-full"
                />
                <div className="text-xs text-gray-400 mt-1">{topP}</div>
              </div>

              <div>
                <h3 className="text-sm font-medium mb-2">Frequency Penalty</h3>
                <input
                  type="range"
                  min="0"
                  max="2"
                  step="0.1"
                  value={frequencyPenalty}
                  onChange={(e) => setFrequencyPenalty(parseFloat(e.target.value))}
                  className="w-full"
                />
                <div className="text-xs text-gray-400 mt-1">{frequencyPenalty}</div>
              </div>

              <div>
                <h3 className="text-sm font-medium mb-2">Presence Penalty</h3>
                <input
                  type="range"
                  min="0"
                  max="2"
                  step="0.1"
                  value={presencePenalty}
                  onChange={(e) => setPresencePenalty(parseFloat(e.target.value))}
                  className="w-full"
                />
                <div className="text-xs text-gray-400 mt-1">{presencePenalty}</div>
              </div>
            </CardBody>
          </Card>
        </div>

        {/* Chat Interface */}
        <div className="glass-card rounded-xl lg:col-span-3 h-full flex flex-col purple-glow">
          <div className="p-4 border-b border-content3 flex justify-between items-center">
            <div className="flex gap-2">
              <Button
                variant={selectedPreset === "Creative" ? "solid" : "flat"}
                className={selectedPreset === "Creative" ? "bg-secondary" : "bg-opacity-20 text-white"}
                size="sm"
                onClick={() => handlePresetChange("Creative")}
              >
                Creative
              </Button>
              <Button
                variant={selectedPreset === "Technical" ? "solid" : "flat"}
                className={selectedPreset === "Technical" ? "bg-secondary" : "bg-opacity-20 text-white"}
                size="sm"
                onClick={() => handlePresetChange("Technical")}
              >
                Technical
              </Button>
              <Button
                variant={selectedPreset === "Precise" ? "solid" : "flat"}
                className={selectedPreset === "Precise" ? "bg-secondary" : "bg-opacity-20 text-white"}
                size="sm"
                onClick={() => handlePresetChange("Precise")}
              >
                Precise
              </Button>
            </div>
            <div className="flex gap-2">
              <Button variant="flat" className="bg-opacity-20 text-white" size="sm">Save</Button>
              <Button className="bg-secondary" size="sm">Update</Button>
              <Button color="danger" variant="flat" size="sm">Delete</Button>
            </div>
          </div>

          <div className="overflow-auto flex-grow p-4">
            <div className="flex flex-col gap-4">
              {messages.map((message: Message) => (
                message.role !== "system" && (
                  <div key={message.id} className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                    {message.role === "assistant" && (
                      <div className="w-8 h-8 rounded-full bg-secondary/20 flex items-center justify-center">
                        <Icon icon="lucide:bot" className="text-secondary" />
                      </div>
                    )}

                    <div className={`max-w-[80%] rounded-lg p-3 ${
                      message.role === "user"
                        ? "message-user text-white"
                        : "message-assistant text-white"
                    }`}>
                      <p className="whitespace-pre-wrap">{message.content}</p>

                      {message.role === "assistant" && (
                        <div className="flex justify-end gap-2 mt-2">
                          <Button
                            isIconOnly
                            size="sm"
                            variant="light"
                            className="text-white"
                            onClick={() => handleFeedback(message.id, 'like')}
                          >
                            <Icon icon="lucide:thumbs-up" className="text-sm" />
                          </Button>
                          <Button
                            isIconOnly
                            size="sm"
                            variant="light"
                            className="text-white"
                            onClick={() => handleFeedback(message.id, 'dislike')}
                          >
                            <Icon icon="lucide:thumbs-down" className="text-sm" />
                          </Button>
                          <Button isIconOnly size="sm" variant="light" className="text-white">
                            <Icon icon="lucide:copy" className="text-sm" />
                          </Button>
                        </div>
                      )}
                    </div>

                    {message.role === "user" && (
                      <div className="w-8 h-8 rounded-full bg-secondary flex items-center justify-center">
                        <Icon icon="lucide:user" className="text-white" />
                      </div>
                    )}
                  </div>
                )
              ))}
            </div>
          </div>

          <div className="p-4 border-t border-content3">
            <div className="flex gap-2">
              <Input
                placeholder="Enter your prompt here..."
                value={prompt}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPrompt(e.target.value)}
                onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSendPrompt();
                  }
                }}
                classNames={{
                  input: "text-white",
                  inputWrapper: "glass-input"
                }}
                endContent={
                  <Button
                    isIconOnly
                    color="secondary"
                    variant="flat"
                    onClick={handleSendPrompt}
                  >
                    <Icon icon="lucide:send" />
                  </Button>
                }
                className="w-full"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
