import React from "react";
import { Card, CardBody, CardHeader, Input, Button, Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Textarea, Slider, Chip } from "@heroui/react";
import { Icon } from "@iconify/react";

interface Message {
  id: number;
  role: "user" | "assistant" | "system";
  content: string;
}

export function PlaygroundInterface() {
  const [prompt, setPrompt] = React.useState("");
  const [messages, setMessages] = React.useState<Message[]>([
    { id: 1, role: "system", content: "You are a helpful Acme AI code assistant" },
  ]);
  const [model, setModel] = React.useState("gemini-pro");
  const [temperature, setTemperature] = React.useState(0.5);
  const [maxLength, setMaxLength] = React.useState(1024);
  const [topP, setTopP] = React.useState(0.5);
  const [frequencyPenalty, setFrequencyPenalty] = React.useState(0);
  const [presencePenalty, setPresencePenalty] = React.useState(0);
  const [selectedPreset, setSelectedPreset] = React.useState("Creative");

  const handleSendPrompt = () => {
    if (!prompt.trim()) return;

    // Add user message
    const newUserMessage = {
      id: messages.length + 1,
      role: "user" as const,
      content: prompt
    };

    setMessages([...messages, newUserMessage]);
    setPrompt("");

    // Simulate AI response (in a real app, this would be an API call)
    setTimeout(() => {
      const aiResponse = {
        id: messages.length + 2,
        role: "assistant" as const,
        content: "This is a simulated AI response based on your prompt: \"" + prompt + "\". In a real implementation, this would be generated by the selected AI model with the specified parameters."
      };
      setMessages(prev => [...prev, aiResponse]);
    }, 1000);
  };

  const handleFeedback = (messageId: number, type: 'like' | 'dislike') => {
    console.log(`Feedback for message ${messageId}: ${type}`);
    // In a real app, this would send feedback to the server
  };

  const handlePresetChange = (preset: string) => {
    setSelectedPreset(preset);

    // Adjust parameters based on preset
    switch(preset) {
      case "Creative":
        setTemperature(0.8);
        setTopP(0.9);
        setFrequencyPenalty(0.2);
        setPresencePenalty(0.2);
        break;
      case "Technical":
        setTemperature(0.3);
        setTopP(0.6);
        setFrequencyPenalty(0.1);
        setPresencePenalty(0.1);
        break;
      case "Precise":
        setTemperature(0.1);
        setTopP(0.3);
        setFrequencyPenalty(0);
        setPresencePenalty(0);
        break;
    }
  };

  return (
    <div className="flex flex-col h-full">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold text-white">Playground</h1>
        <div className="flex gap-2">
          <Button variant="flat" className="bg-opacity-20 text-white" startContent={<Icon icon="lucide:moon" />}>
            Theme
          </Button>
          <Button variant="flat" className="bg-opacity-20 text-white" startContent={<Icon icon="lucide:settings" />}>
            Settings
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 h-[calc(100vh-180px)]">
        {/* Parameters Panel */}
        <div className="glass-card rounded-xl lg:col-span-1 h-full overflow-auto purple-glow">
          <div className="p-4 border-b border-content3">
            <h3 className="text-lg text-white">Parameters</h3>
          </div>
          <div className="p-4 flex flex-col gap-6">
            <div>
              <p className="text-small text-default-500 mb-1">System</p>
              <Textarea
                value="You are a helpful Acme AI code assistant"
                className="w-full glass-input text-white"
                size="sm"
              />
            </div>

            <div>
              <p className="text-small text-default-500 mb-1">Model</p>
              <Dropdown>
                <DropdownTrigger>
                  <Button
                    variant="flat"
                    className="w-full justify-between glass-input text-white"
                    endContent={<Icon icon="lucide:chevron-down" className="text-sm" />}
                  >
                    {model}
                  </Button>
                </DropdownTrigger>
                <DropdownMenu
                  aria-label="Model Selection"
                  onAction={(key) => setModel(key as string)}
                  selectedKeys={[model]}
                  selectionMode="single"
                  className="glass-dropdown"
                >
                  <DropdownItem key="gemini-pro">gemini-pro</DropdownItem>
                  <DropdownItem key="gemini-1.5-flash">gemini-1.5-flash</DropdownItem>
                  <DropdownItem key="gemini-1.5-pro">gemini-1.5-pro</DropdownItem>
                  <DropdownItem key="gpt-4">gpt-4</DropdownItem>
                  <DropdownItem key="gpt-3.5-turbo">gpt-3.5-turbo</DropdownItem>
                  <DropdownItem key="claude-3">claude-3</DropdownItem>
                </DropdownMenu>
              </Dropdown>
            </div>

            <div>
              <div className="flex justify-between items-center">
                <p className="text-small text-default-500">Temperature</p>
                <p className="text-small text-white">{temperature}</p>
              </div>
              <div className="relative py-2">
                <div className="slider-track absolute top-1/2 w-full -translate-y-1/2"></div>
                <Slider
                  aria-label="Temperature"
                  step={0.1}
                  maxValue={1}
                  minValue={0}
                  value={temperature}
                  onChange={(value) => setTemperature(value as number)}
                  className="max-w-full"
                  classNames={{
                    track: "bg-transparent",
                    thumb: "slider-thumb"
                  }}
                />
              </div>
            </div>

            <div>
              <div className="flex justify-between items-center">
                <p className="text-small text-default-500">Max Length</p>
                <p className="text-small text-white">{maxLength}</p>
              </div>
              <div className="relative py-2">
                <div className="slider-track absolute top-1/2 w-full -translate-y-1/2"></div>
                <Slider
                  aria-label="Max Length"
                  step={128}
                  maxValue={4096}
                  minValue={128}
                  value={maxLength}
                  onChange={(value) => setMaxLength(value as number)}
                  className="max-w-full"
                  classNames={{
                    track: "bg-transparent",
                    thumb: "slider-thumb"
                  }}
                />
              </div>
            </div>

            <div>
              <div className="flex justify-between items-center">
                <p className="text-small text-default-500">Top P</p>
                <p className="text-small text-white">{topP}</p>
              </div>
              <div className="relative py-2">
                <div className="slider-track absolute top-1/2 w-full -translate-y-1/2"></div>
                <Slider
                  aria-label="Top P"
                  step={0.1}
                  maxValue={1}
                  minValue={0}
                  value={topP}
                  onChange={(value) => setTopP(value as number)}
                  className="max-w-full"
                  classNames={{
                    track: "bg-transparent",
                    thumb: "slider-thumb"
                  }}
                />
              </div>
            </div>

            <div>
              <div className="flex justify-between items-center">
                <p className="text-small text-default-500">Frequency Penalty</p>
                <p className="text-small text-white">{frequencyPenalty}</p>
              </div>
              <div className="relative py-2">
                <div className="slider-track absolute top-1/2 w-full -translate-y-1/2"></div>
                <Slider
                  aria-label="Frequency Penalty"
                  step={0.1}
                  maxValue={2}
                  minValue={0}
                  value={frequencyPenalty}
                  onChange={(value) => setFrequencyPenalty(value as number)}
                  className="max-w-full"
                  classNames={{
                    track: "bg-transparent",
                    thumb: "slider-thumb"
                  }}
                />
              </div>
            </div>

            <div>
              <div className="flex justify-between items-center">
                <p className="text-small text-default-500">Presence Penalty</p>
                <p className="text-small text-white">{presencePenalty}</p>
              </div>
              <div className="relative py-2">
                <div className="slider-track absolute top-1/2 w-full -translate-y-1/2"></div>
                <Slider
                  aria-label="Presence Penalty"
                  step={0.1}
                  maxValue={2}
                  minValue={0}
                  value={presencePenalty}
                  onChange={(value) => setPresencePenalty(value as number)}
                  className="max-w-full"
                  classNames={{
                    track: "bg-transparent",
                    thumb: "slider-thumb"
                  }}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Chat Interface */}
        <div className="glass-card rounded-xl lg:col-span-3 h-full flex flex-col purple-glow">
          <div className="p-4 border-b border-content3 flex justify-between items-center">
            <div className="flex gap-2">
              <Button
                variant={selectedPreset === "Creative" ? "solid" : "flat"}
                className={selectedPreset === "Creative" ? "bg-secondary" : "bg-opacity-20 text-white"}
                size="sm"
                onClick={() => handlePresetChange("Creative")}
              >
                Creative
              </Button>
              <Button
                variant={selectedPreset === "Technical" ? "solid" : "flat"}
                className={selectedPreset === "Technical" ? "bg-secondary" : "bg-opacity-20 text-white"}
                size="sm"
                onClick={() => handlePresetChange("Technical")}
              >
                Technical
              </Button>
              <Button
                variant={selectedPreset === "Precise" ? "solid" : "flat"}
                className={selectedPreset === "Precise" ? "bg-secondary" : "bg-opacity-20 text-white"}
                size="sm"
                onClick={() => handlePresetChange("Precise")}
              >
                Precise
              </Button>
            </div>
            <div className="flex gap-2">
              <Button variant="flat" className="bg-opacity-20 text-white" size="sm">Save</Button>
              <Button className="bg-secondary" size="sm">Update</Button>
              <Button color="danger" variant="flat" size="sm">Delete</Button>
            </div>
          </div>

          <div className="overflow-auto flex-grow p-4">
            <div className="flex flex-col gap-4">
              {messages.map((message) => (
                message.role !== "system" && (
                  <div key={message.id} className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                    {message.role === "assistant" && (
                      <div className="w-8 h-8 rounded-full bg-secondary/20 flex items-center justify-center">
                        <Icon icon="lucide:bot" className="text-secondary" />
                      </div>
                    )}

                    <div className={`max-w-[80%] rounded-lg p-3 ${
                      message.role === "user"
                        ? "message-user text-white"
                        : "message-assistant text-white"
                    }`}>
                      <p className="whitespace-pre-wrap">{message.content}</p>

                      {message.role === "assistant" && (
                        <div className="flex justify-end gap-2 mt-2">
                          <Button
                            isIconOnly
                            size="sm"
                            variant="light"
                            className="text-white"
                            onClick={() => handleFeedback(message.id, 'like')}
                          >
                            <Icon icon="lucide:thumbs-up" className="text-sm" />
                          </Button>
                          <Button
                            isIconOnly
                            size="sm"
                            variant="light"
                            className="text-white"
                            onClick={() => handleFeedback(message.id, 'dislike')}
                          >
                            <Icon icon="lucide:thumbs-down" className="text-sm" />
                          </Button>
                          <Button isIconOnly size="sm" variant="light" className="text-white">
                            <Icon icon="lucide:copy" className="text-sm" />
                          </Button>
                        </div>
                      )}
                    </div>

                    {message.role === "user" && (
                      <div className="w-8 h-8 rounded-full bg-secondary flex items-center justify-center">
                        <Icon icon="lucide:user" className="text-white" />
                      </div>
                    )}
                  </div>
                )
              ))}
            </div>
          </div>

          <div className="p-4 border-t border-content3">
            <div className="flex gap-2">
              <Input
                placeholder="Enter your prompt here..."
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSendPrompt();
                  }
                }}
                classNames={{
                  input: "text-white",
                  inputWrapper: "glass-input"
                }}
                endContent={
                  <Button
                    isIconOnly
                    color="secondary"
                    variant="flat"
                    onClick={handleSendPrompt}
                  >
                    <Icon icon="lucide:send" />
                  </Button>
                }
                className="w-full"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
